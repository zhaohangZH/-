一、数组
  var ary=[12,'哈哈',true,null,undefined,{},function(){}];

  ->数组中每一项的值可以是任何数据类型的
  ->数组的创建有两种方式：
    1、字面量方式
      var ary=[12,23];

    2、实例创建方式
      var ary=new Array();
      ->new Array(n)：创建一个长度为N的数组,数组中的每一项是UNDEFINED
      ->new Array(非数字) 或者 new Array(放两项及两项以上)：创建一个数组，并且把括号中的内容当做数组的每一项存储起来

  ->数组率属于对象数据类型的
    typeof [] ->'object'

  ->数组也是由属性名和属性值组成的，每一项的值是它的属性值，它的属性名是数字索引，索引从零开始，LENGTH属性存储的是它的长度

  var ary=[12,23,34]; //->一维数组    ary[1]    ->23
  var ary=[12,[23,34]]; //->二维数组  ary[1][0] ->23
  var ary=[12,[23,[34]]] //->多维数组 ary[1][1][0] ->34

二、数组中常用的一些方法
   console.log(Array.prototype); 数组中提供的所有方法在这都可以看到

   A:方法名及所代表的含义
   B:参数
   C:返回值
   D:操作该方法，原来的数组是否发生了改变

   1、增、删、改
    ->push：向数组末尾追加新项
      参数:一到多个,需要新增加的内容
      返回值:新增后数组的最新长度
      原有数组是否改变:变

      ary[ary.length]=xxx  =>向数组末尾追加一项新的内容,这种方式属于对象键值对的操作

      ary.splice(ary.length,0,'x')

    ->unshift：向数组开头追加新项
      参数:新增加的内容
      返回值:新增后数组的最新长度
      原有数组是否改变:变

      ary.splice(0,0,'x')

    ->shift：删除数组第一项
      参数:无
      返回值:被删除的这一项内容
      原有数组是否改变:变

      ary.splice(0,1)

    ->pop：删除数组最后一项
      参数:无
      返回值:被删除的这一项内容
      原有数组是否改变:变

      ary.length-- =>删除数组最后一项

      ary.splice(ary.length-1)

    ->splice
      splice(n,m)：从索引N开始删除M个元素，返回的结果是一个新的数组，数组中包含被删除的那些内容，原来数组会发生改变
        splice(n) 从索引N开始删除到末尾
        splice(0) 清空数组，原有的内容(被删除的)会以一个新数组返回

      splice(n,m,x)：从索引N开始删除M个元素，把删除的部分用X代替(替换)，返回的结果依然是被删除的内容(放在新数组中的)，原来数组改变
        splice(n,0,x) 把X插入到索引N之前


  2、查询
    ->slice(n,m)：从索引N开始找到索引M处(不包含M)，把找到的部分以一个新数组返回，原来的数组不变
      slice(n) 从索引N开始找到末尾
      slice(0) 数组的克隆，把原有数组克隆一份一模一样的新数组出来
               <=> slice()
      slice(-4,-1) 和字符串的相同，用总长度加负数索引获取到正数，然后按照正数索引去查找即可 例如：总长度为5 <=> slice(1,4)

      ===

      var ary1=[12,23];
      var ary2=ary1.slice(0); //->克隆的意义在于内容相同，但是隶属于不同的内容空间，属于两个独立的个体
      ary2 ->[12,23]
      ary1==ary2 ->FALSE 是不同的空间地址

    ->concat(数组/数字)：把两个或者多个数组进行拼接，最后合并为一个数组，原来的数组不变


  3、转换为字符串
    
->toString:把数组转换为字符串，原有数组不变，数组中的每一项在字符串中用逗号隔开；

->join(字符)：把数组中的每一项按照指定字符拼接成字符串，原有数组不变，和字符串中的split对应
 {ary.join('+')//->"1+2+3+4"
  eval('1+1')//->2把字符串变为JS表达式执行}；
  4、排序和排列的
    ->reverse：把数组倒过来排列，原有数组改变

    ->sort：把数组进行排序
      var ary=[1,3,2,4];
      ary.sort() =>[1,2,3,4]
      ary.sort(function(a,b){
         return a-b;//->升序
         return b-a;//->降序
      })

      ary=[12,14,24,4];
      ary.sort() =>[12,14,24,4] 在传递参数的情况下，我们的SORT方法只适用于十位数以下的数字，处理十位数以上的数字，需要传递FUNCTION

  =====后面讲的方法在IE6~8下不兼容
    ->indexOf/lastIndexOf：和字符串相同，获取当前项在数组中第一次/最后一次出现位置的索引，如果数组中没有这一项返回的结果是-1(在不考虑兼容的情况下，我们可以根据这个规律验证数组中是否包含某项)

    ->forEach：循环数组中的每一项
    ->map：循环数组中的每一项，相对于FOREACH来说，MAP可以把每一项的值进行修改

    var ary=[12,23,34,45];
    ary.forEach(function(item,index){
        //->item：当前循环这一项的内容
        //->index：当前循环这一项的索引
    });

=========================================
二、算法
  目的：“开阔思维”

  1、数组去重

  2、递归

  3、冒泡

  4、快速

  5、插入




















