用来处理字符串的规则（只能处理字符串）
验证当前的字符串是否符合规则-匹配
把一个字符串中符合规则的字符捕获到-捕获

正则匹配：[正则].test（[字符串]）
正则匹配：[正则].exec（[字符串]）或者[字符串].match（[正则]）或者[字符串].match（[正则]）或者[字符串].replace（[正则]，function...）或者[字符串].split（[正则]）...

元字符和修饰符
一个正则就是有元字符和修饰符组成的，想要学会编写自己所需要的规则，需要牢牢掌握元字符和修饰符

修饰符 img
i(ignoreCase)：忽略单词大小写匹配
m(multiline)：多行匹配
g(global)：全局匹配
修饰符放在最后一个斜杠的后面
var reg=/^\d+$/img;
实例创建方式中，修饰符放在第二个实参字符串中
var reg=new RegExp('','img');

特殊元字符元字符
\:转义字符，把普通元字符转换为特殊的意义或者把特殊元字符转换为普通的意义，
例如：/\d/ d本身是一个字母，前面加一个转义字符，代表0-9之间的一个数字或者/\./点在正则中代表任意字符（特殊含义），此处加上转义字符，代表的就是本身意思点了
^：以某一个元字符开始，例如：/^1/代表当前字符串应该是以1开始的
$：以某一个元字符结束，例如：/2$/代表当前字符串最后一个字符串应该是以2结尾
\d：代表一个0-9之间的数字
\D：代表一个非0-9之间的任意字符（大写字母都和小写字母的是相反的）
\w：数字、字母、下划线三者中的任意一个
\n：匹配一个换行符
\b：匹配一个边界
\s：匹配一个空白字符
.：除了\n以外的任意一个字符
x|y：x或者y中的一个字符
()：分组
[]：匹配一个a-z中的任意字符/[0-9]/ 0-9之间的任何一个数字，等价于\d
[^a-z]：除了a-z以外的任意一个字符，这里^是取反的意思
[xyz]：x或者y或者z，三者中的一个
[^xyz]：除了三者以外的任意一个字符
？=：正向预查
？！：负向预查
？:：只匹配不捕获

量词元字符
*：前面的元字符出现零次到多次
+：前面的元字符出现一次到多次
?：前面的元字符出现零次或一次
{n}：出现n次
{n,}：出现n到多次
{n,m}：出现n到m次

两个斜杠中间包起来的都是正则的元字符
1、特殊元字符：有特殊含义的
2、量词元字符：代表出现多少次的元字符
3、普通元字符：代表本身含义的
var reg=/^\d+$/g;
var reg=new RegExp（'[元字符]'，'[修饰符]'）；



手机号码
1、以1开头
11位数
var reg=/^1\d{10}$/;//->同时加了^和$,次正则可以理解为只能是某某某规则；如果两个都不加，只要字符串中有一部分符合这个规则即可

中括号的作用和细节问题
中括号里面出现的多位数字，不是多位数，而是数字中出现的任意一个
var reg=/^[18]$/;//->1或者8中的一个数字；
var reg=/^[16-85]$/;//->1或者6-8或者5，三者中的一个数字

\w使用中括号的方式表达；数字、字母、下划线
var reg=/^[0-9a-zA-Z_]$/;

中括号中出现的元字符一般都是自己本身的意思（即使具备特殊的意思，很多元字符也都自动变为本身的意思了）
var reg=/^[+-.\d?]$/;//->除了\d依然代表的是0-9中的一个数字，其余的都是代表本身的意思********************************

小括号的作用和细节问题
var reg=/^(18|19)$/;//->当我们使用分组把它包起来的时候就好了，现在只能匹配18或者19了，其余的都不可以；
正则中分组（）的第一个作用：改变默认的优先级
验证年龄18-65
var reg=/^((18|19)|([2-5]\d)|(6[0-5]))$/;
小括号分组第二个作用：分组引用var reg=/^([a-z])([a-z])\2\1$/;oppo,moom;
分组第三个作用：分组捕获




验证中文姓名的；
只能是中文汉字
第一个汉字的ASCII码:\u4E00
最后一个汉字ASCII码:\u9FA5
正常一般都是2-4位
var reg=/^[\u4E00-\u9FA5]{2,4}$/;

验证是否为有效数字的
可能出现+/-，也可能不出现
一位数可以是零，多位数零不能作为开头
小数部分可能有可能没有，如果一旦有，小数点后面必须有数字
var reg=/^-?(\d|([1-9]\d+))(\.\d+)?$/;

验证身份证号码
简单的：前17位是数字，最后一位数字或者X
完善的：我们需要在身份证中获取到省市县、出生年月日、性别等信息
var reg=/^(\d{6})(\d{4})(\d{2})(\d{2})\d{2}(\d)(?:\d|X)$/;
把需要单独获取的部分用分组包起来，正则捕获的时候可以捕获到分组中的内容，如果加了分组，但是不想捕获，在该分组前面加？：即可（只匹配不捕获）

【正则的捕获】
exec：可以实现正则的捕获，每一次执行exec只能捕获到一个匹配的结果，而且结果是一个数组
第一项：当前正则捕获的内容（字符串）
index；当前正则捕获的其实索引
input;当前操作的原始字符串
var reg=/\d+/;//->包含1到多个数字

问题：当前正则执行一次exec只能捕获到一个匹配的内容，我执行两次exec，第二次捕获到的依然在还是第一次结果，不管执行多少次exec，捕获到的依然是都是第一个
“正则捕获的懒惰性”
lastIndex：下一个正则捕获的时候，在字符串中查找的开始位置索引
第一次查找之前.reg.lastIndex=0，也就是第一次是从字符串的开始位置查找的、，所以找到的是2017
第一次执行exec结束后，reg.lastIndex值还是0，所以第二次依然是从字母串的开始位置找的，找到的当然还是2017
解决正则的懒惰性：
执行exec后，让lastIndex值变为当前这一次捕获的结束位置，这样下一次捕获的时候，就可以接着继续查找了（而不是从头开始了）
我们只需要给正则加一个全家修饰符g，就可以在每一次执行exec后，自动修改它的lastIndex了；
 var reg = /\d+/g;
 var str = 'zhufeng2017peixun2018';
 
 reg.lastIndex ->0
 reg.exec(str); ->['2017'...]
 
 reg.lastIndex ->11
 reg.exec(str); ->['2018'...]
 
 reg.lastIndex ->21
 reg.exec(str); ->null 捕获不到
 
 reg.lastIndex ->0
 reg.exec(str); ->['2017'...]

上面的案例中，我们知道执行两次就可以捕获全了，但是如果你不知道具体要捕获多少次，我们该如何是好？
  * => 接下来我们自己在RegExp的原型上扩展一个方法myExecAll，执行这个方法，可以把所有匹配的一次性都捕获到

str:需要捕获的原始字符串
 RegExp.prototype.myExecAll = function myExecAll(str){
      //->this:reg
      //->为了防止不加g的时候，每一次捕获的都是第一个，导致死循环，我们在正则没有加g的时候执行一次即可
      if(!this.global){
          //->没有加g:执行一次exec即可
          return this.exec(str);
      }
      //->已经加g了
      var ary = []; //->存储所有捕获的结果
      var res = this.exec(str);
      while(res){
          ary[ary.length]=res[0];//->把每一次捕获的结果存放在数组的末尾
          res = this.exec(str);
      }
      return ary;
 }

生活如此美好，何必这么麻烦和纠结
  * 字符串中有一个方法叫做match，执行这个方法，也可以把所有匹配的内容，一次性捕获到，但是前提正则也需要加g，不加g，也只能捕获第一个
  */
 var reg = /\d+/g; 
 var str = 'zhufeng2017peixun2018hahah2019heheh2020';
 str.match(reg); //->['2017','2018','2019','2020']
 
 /*
  * 难道生活如此简单吗？
  * match虽然很简单暴力，但是在需要捕获小分组内容的时候，就不太符合我们的需求了，因为match只能把大正则匹配捕获到，对于小分组匹配的无法捕获
  */
 var ary = ['zxt',28]; 
 var str = 'my name is {0}，i am {1} years old~~';
 //->我们想把 {0} 替换成 ary[0]
 //->我们想把 {1} 替换成 ary[1]
 //->我们既要捕获到 {数字}，也需要把里面的数字单独的获取到(因为这个数字可以充当我们在数组中获取内容的索引)
 var reg = /\{(\d+)\}/g; //->大正则匹配的是‘一个大括号中包含数字’，第一个小分组匹配的是‘大括号中的那个数字’
 
 reg.exec(str); //->["{0}", "0"...] 第一项大正则匹配的结果，第二项第一个分组匹配的结果 ，也就是使用exec可以捕获到小分组匹配的内容
 reg.exec(str); //->["{1}", "1"...]
 
 str.match(reg); //->["{0}", "{1}"] 使用match只能捕获到大正则匹配的，小分组匹配的获取不到
 
 /*
  * match并不是所有情况下，都捕获不到分组的内容，当只需要捕获一次就可以完成的时候(或者不加g的时候)，match获取的结果和exec一样
  */
 var reg = /^(\d{6})(\d{4})(\d{2})(\d{2})\d{2}(\d{1})(?:\d|X)$/; //->身份证号码的正则
 var str = '130828198802240761';
 str.match(reg); //->["130828198802240761", "130828", "1988", "02", "24", "6"...]
 
 /*
 * test在某些时候，也是实现捕获的：test匹配的时候，也是把符合的找到了，我们就可以使用一些特殊的手段，把查找的内容取出来
  */
 var str = 'my name is {0}，i am {1} years old~~';
 var reg = /\{(\d+)\}/g;
 
 reg.test(str);
 console.log(RegExp.$1);//->获取第一次捕获的时候,第一个分组中的内容($1) =>'0'
 
 reg.test(str);
 console.log(RegExp.$1); //=>'1' 并且执行test,如果设置了g，也是可以修改lastIndex的
 
 reg.exec(str); //->null
上面是正则捕获：懒惰性，正则捕获还有一个特点：贪婪性
1.var str='zhufeng2017peixun2018';
 var reg=/\d+/g;
 reg.exec(str);//->['2017'...] 每次捕获的时候都是把当前正则匹配的最长结果捕获到 ->`贪婪性`
 //->取消贪婪性：在量词元字符后面加一个问号就可以了
 //=>问号作用很多
 //1、如果放在一个非量词元字符的后面，它本身就是代表出现零次或者一次的量词元字符
 //2、如果出现在量词元字符的后面，它本身是取消捕获时候的贪婪性的
 var str='zhufeng2017peixun2018';
 var reg=/\d+?/g;
 reg.exec(str); //->['2'...]
 
 3、?: 只匹配不捕获
 4、?= 正向预查
 5、?! 负向预查
















