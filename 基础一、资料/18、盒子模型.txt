var oBox=document.getElemById（'box'）；
JS中常用的盒子模型属性：获取元素的样式
1、clientWidth/clientHeight：可视区域的宽度和高度
clientWidth：width+padding（left&right）
clientHight：hight+padding（top&bottom）
和内容是否溢出以及是否设置了overflow没有关系，所谓的可视区域指定是一屏幕的区域，不含溢出的部分；



获取当前浏览器可视窗口的宽度（可视窗口：一屏幕的宽度或高度）
document.documentElement.clientWidth||document.body.clientWidth
document.documentElement.clientHeight||document.body.clientHeight
操作当前浏览器的盒子模型属性，我们需要写两套
document.documentElement.xxx兼容大部分浏览器
document.body.xxx对于不兼容上述操作的浏览器使用这种办法获取


2、clientTop/clientLeft：上边框或者左边框的宽度（border-width值）
但是没有clientRight和clientBottom这两个属性
js盒子模型属性获取的结果都是不带单位的
获取的结果都是整数（会自动的把获取的结果四舍五入）

3、offsetWidth/offsetHeight：在clientWidth/clientHeight的基础上加上边框即可
和内容是否溢出没有任何的关系

4、scrollWidth/scrollHeight
没有内容溢出的情况下
scrollWidth=clientWidth
scrollHeight=clientHeight
有内容溢出的情况下
scrollWidth=paddingLeft+真实内容的宽度（包含溢出的内容）
scrollHeight=paddingTop+真实内容的高度（包含溢出的内容）
是否设置overflow：hidden对获取的结果是产生影响的，而且每个浏览器获取的结果也还都不太一样，所有我们的这两个属性值，在有内容溢出的情况下，我们获取的值都是约等于的值
获取HTML页面的真实宽高(包含溢出的内容) '约等于的值'
 document.documentElement.scrollWidth||document.body.scrollWidth
 document.documentElement.scrollHeight||document.body.scrollHeight
前四种JS属性都是在特定的情况下使用（他们获取的是复合纸），如果想获取元素具体某一个样式属性的值，上述的属性就不合适了


获取当前元素所有经过浏览器计算的样式
 * ->只要当前元素能在页面中展示,那么它的样式都是经过浏览器计算的,不管是是行内编写的样式,还是在样式表中编写,再或者你没有编写这些样式,浏览器也会默认为元素设置一些默认样式,这些样式都可以理解为经过浏览器计算的
 *
 * [标准浏览器]
 * -> window.getComputedStyle([元素],[样式伪类,一般都用NULL]) 获取的结果是一个对象,存储了所有经过计算的样式
 *
 * [IE6~8]
 * -> [元素].currentStyle 获取的结果也是一个对象,存储了所有经过计算的样式
 */


 getCss：获取当前元素经过浏览器计算的某一个样式(兼容所有的浏览器)
 
  @parameters
    curEle：当前需要操作的元素[object]
    attr：需要获取的样式属性名[string],例如:'paddingLeft'...
  @return
   获取的样式属性值
//->获取的结果是带着单位的,不带会更好,我们最好把单位去掉
//=>不是所有获取的样式属性值都要去单位的，类似于 float、position、display等样式属性值都不是数字，无单位可去，还有 '50px 40px'这种复合样式属性值也是没必要去单位的

//->有些样式属性值不同浏览器用的不一样，例如透明度
//=>标准：opacity  获取的结果就是一个数字;:opacity:0.5;
//=>IE低版本：filter  获取的结果是 'alpha(opacity=xxx)'=>：'alpha(opacity=50)[0.5*100]'
function getCss(curEle, attr) {
    var val = null;
    var reg = null;
    if ('getComputedStyle' in window) {
         val = window.getComputedStyle(curEle, null)[attr];
    } else {
                //->IE低版本浏览器中，如果传递进来的是opacity，我们需要使用filter来处理；
    if (attr.toLowerCase()===''opacity){
                //->'alpha(opacity=xxx)'我们需要在得到结果中获取到数字（0-100）
         val=curEle.currentStyle['filter'];
         reg=/^alpha\(opacity=(\d+(?:\.\d+)?)\)$/i;
         val=reg.test(val)?reg.exec(val)[1]/100:1;
    }else{
         val = curEle.currentStyle[attr];
    }}
         reg=/^-?\d+(\.\d+)?(px|em|rem)?$/i;
         reg.test(val) ? val = parseFloat(val) : null;
         return val;
}
我们在获取透明度的时候，用户传递的attribute是'opacity',说明用户想获取的是透明度，得到的结果是一个小数；但是在IE低版本浏览器中，无法通过这个属性获取到想要的结果，如果传递的是这个属性，我们需要把其转换为filter，然后在获取到透明的结果，最后在得到的

















curEle['style'][attr]=value
//我们在JS中设置元素的样式值，都只能把样式写在元素的行内样式上
//在执行这个方法的时候，如果传递的value值没有设置单位，我们根据情况手动的加单位PX
//如果传递进来的是width|height|margin|padding|margin（Top|Left|Right|Bottom）|padding（Top|Left|Right|Bottom|top|left|right|bottom...）传递进来的值是纯数字
符合这两个条件的，我们默认就把单位给加上即可
我们对于一些不兼容的样式属性，在设置的时候，需要
function setCss(curEle,attr,value){
    if (attr.toLowerCase() === 'opacity') {
            curEle.style.opacity = value;
            curEle.style.filter = 'alpha(opacity=' + value * 100 + ')';
            return;
        }

        var unitReg = /^(width|height|((margin|padding)?(top|left|right|bottom)?))$/i;
        unitReg.test(attr) && !isNaN(value) ? value += 'px' : null;
        curEle['style'][attr] = value;
    }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//->setGroupCss：批量设置元素的样式
    function setGroupCss(curEle, options) {
        if (Object.prototype.toString.call(options) !== '[object Object]') return;
        for (var attr in options) {
            if (options.hasOwnProperty(attr)) {
                setCss(curEle, attr, options[attr]);
            }
        }
    }
``````````````````````````````````````````````````````````````````
5、offsetLeft/offsetTop/offsetParent
=>获取当前元素的左偏移/上偏移/父级参照物
1.offsetParent：获取当前元素的父级参照物
在默认的情况下，body中出现的所有元素的父级参照物都是body（因为在同一个平面上），body本身的父级参照物是null；
我们通过设置position定位，可以让元素脱离文档流，从而改变元素的父级参照物（css中我们当前元素是相对于谁定位的，那么JS中它的父级参照物就是谁）
2.offsetLeft和offsetTop：当前元素距离其父级参照物的左偏移和上偏移
在大部分浏览器中，这个距离是从当前元素的外边框开始到父级参照物的内边框结束（不包含父级元素的边框）
IE8（纯IE8，不是模拟器），这个距离包含了父级参照物的边框，偏移量=当前元素的外边框到父级参照物的外边框

//offset：获取当前元素距离body的左偏移和上偏移
返回结果是一个对象{left:xxx,top:xxx}
function offset(curEle){
//首先获取当前元素的左偏移和上偏移，以及它的父级参照物
   var l=curEle.offsetLeft,
       t=curEle.offsetTop,
       p=curEle.offsetParent;
    while (p){
           //首先累加父级参照物的边框（IE8下，偏移量已经包含父级参照物的边框了，此时我们没必要在累加父级参照物的边框了）
         if(!/MSIE 8/i.test(navigator.userAgent)){
         //navigator.userAgent获取当前浏览器的详细版本信息，IE浏览器有特点‘MSIE[版本号]’                     
             l+=p.clientLeft;
             t+=p.clientTop;
       }
//其次还要继续累加父级参照物的偏移量
       l+=p.offsetLeft;
       t+=p.offsetTop;
       p=p.offsetParent;//如果获取的父级参照物存在，就会一直向上查找，直到父级参照物不存在（说明已经找到body了）
             }
          //最后把累加的l和t返回，代表当前元素距离
       }return{left:l;top:t};
6、scrollTop/scrollLeft
   scrollTop和scrollLeft：当前容器（一般都是当前页面）卷去的高度和宽度
 学习的13个JS盒子模型属性，只有这两个属性是'可读写'的（可以获取也可以设置），而其余的11个属性都是'只读'的
 为了兼容浏览器，我们设置或者获取页面的盒子模型属性值的时候，都要写两套
 有最小值，最小值是零，设置的值小于零也没用
 有最大值，真实页面的高度（document.documentElement.scrollHeight||document.body.scrollHeight）-可视窗口的高度（document.documentElement.clientHeight||document.body.clientHeight）
function win(attr,value){
  if(typeof value !=='undefined'){
    document.documentElement[attr]value;
    document.body[attr]=value;
    return;
}
return document.documentElement[attr]||document.body[attr];
}













