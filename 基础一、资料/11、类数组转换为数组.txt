把类数据转换为数字
借用数组原型上的slice方法，让slice方法执行的时候，里面的this指向arguments，这样就相当于在操作arguments这个类数组，

在JS中，元素集合（HTMLCollection的实例）以及节点集合（NodeList的实例）也都是类数组这些类数组也可以借用数组原型的方法，实现一些相关的操作，例如：借用slice把类数组转换成数组

在IE低版本的浏览器（IE6-8）中运行，我们发现ARG这个类数组是可以借用数组的方法正常操作的，但是元素聚合和节点集合的类数组，无法借用数组原型上的方法，提示：Array.prototype.slice；'this'不是JavaScript对象的错误
所以在IE低版本中，我们把节点或者元素集合转换为数组的时候，就不能偷懒了需要自己写循环处理
var oList=document.getElementsByTagName（'li'）;
var ary=[];
for (var i=0;i<oList.length;i++){
  ary[ary.length]=oList[i];
}

综上所述，如果我们想实现一个方法吧类数组转换为数组，我们需要考虑的事情
1.兼容[].slice.call([类数组])这种模式的，我们使用这种模式，不能兼容的浏览器，我们使用循环一步步的处理
2.如何验证是否兼容：不见的情况下，浏览器会抛出异常（报错），换句话说，只要报错了就是不兼容


浏览器异常信息捕获try catch finally
try{//->JS代码}catch(e){//-TRY中的JS代码执行，如果出现错误，会进入到catch中（没出错不进入这里//->e（error）是一个形参（名字可以随便去，但是必须写形参，不写语法报错）e.message；存储的是当前JS代码执行的报错信息}finally{//->不管JS执行是否报错，最后都会执行finally中的内容（项目中不常用）}

使用try catch作用
  可以捕获到错误信息的同时，防止浏览器抛出异常信息，这样即使当前代码报错了，也不会影响下面的执行
  可以监听到报错，我们可以利用这个机制，做一些兼容处理：把需要执行的代码放在try中，如果不兼容报错了，我们在catch中处理兼容即可

使用try catch捕获异常信息的时候，后面代码还可以继续执行但是项目中难免会出现这样的需求：我们上面代码如果不能正常的执行，下面代码也不让他执行了，此时需要我们手动抛出异常来阻止下面代码的执行
*/
throw new Error('您的人品欠费，请充值~~');//->创建Error类的一个实例：一条错误信息
/*
 * Error这个类划分了几个常用的小类：
 *  ->ReferenceError：引用错误
 *  ->TypeError：类型错误
 *  ->RangeError：范围错误
 *  ->SyntaxError：语法错误
 *  ...
 */
try {
    console.log(a);
} catch (e) {
    // e.message
    throw new ReferenceError('The system is busy, please wait a moment!');
}


