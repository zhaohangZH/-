function Fn(num) {
    this.x = this.y = num;
}
Fn.prototype = {
    x: 20,
    sum: function () {
        console.log(this.x + this.y);
    }
};
var f = new Fn(10);

console.log(f instanceof Fn);//->TRUE
console.log(f instanceof Object);//->TRUE

console.log(f.sum === Fn.prototype.sum);
f.sum();
Fn.prototype.sum();
console.log(f.constructor);

总结的一些规律：
  1.instanceof：检测实例是否属于这个类
  规律：只要是在当前实例原型链上出现的类，使用instanceof检测的时候，出现的结果都是true
 f instanceof Fn->true
 f instanceof Object->true
  2.每一个类的原型都应该拥有一个constructor属性，这个属性存储的值就是当前函数本身；但是如果我们把prototype的值重新指向一个新的堆内存（自己手动创建的对象），类的原型就会失去construtor这个属性；所以在以后开发的时候，如果我们想批量给原型设置属性和方法，需要注意constructor，防止覆盖。
~function（）{
var jQuery=function（）{
//..}；
//->让jQuery这个类的原型重新指向了新的堆内存，这样jQuery的constructor属性就被覆盖了，这样不好，我们需要自己手动的增加constructor属性
jQuery..prototype={
constructor：jQuery，
...}；
window.jQuery=window.$=jQuery；
}（）；
