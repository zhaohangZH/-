1、CSS SPRITES：雪碧图，把图片压缩合并在一张大图上，背景图片统一导入大图，使用background-position定位到具体的小图
2、把css合并成为一个，把js也合并成为一个，减少css以及js等文件的请求次数（真实项目中，我们使用gulp、webpack这些自动化工具，可以完全合并压缩）
3、在移动端开发中，如果页面中的css和js不是很多的话，尽量使用内嵌式，以此减少HTTP请求次数
4、图片的BASE64（慎用，我们在webpack中可以统一设置一下，把多大范围内的图片都BASE64了）
5、把不需要经常更新的数据或者资源进行304缓存或者进行本地存储（localStorage），减少在一定时间段内重复向服务器发送HTTP请求（在此阶段内我们只需要读取缓存或者本地的数据即可）
6、为了加快页面首次打开速度，我们把图片和数据都做一下延迟加载；数据的延迟加载：滚动到底部加载更多数据、分页效果...
7、音视频等资源文件，开始的时候设置preload='none'，也就是开始加载页面的时候不加载资源文件，只有当播放的时候再加载

【减少请求资源文件的大小】
1、图片资源、JS/CSS文件资源等都要进行压缩：图片压缩的前提是保证图片观看的质量
2、减少每一次AJAX请求数据量的大小，对于大数据处理，我们尽量分多次请求（AJAX异步加载或者分页等操作就是这个原理）
3、开启服务器的GZIP压缩，不仅把文件都压缩了，而且传输的数据和内容也是经过压缩的（这个操作由服务器人员来完成）
4、减少页面中的冗余代码，提高代码的重复利用率，例如：JS中的函数封装、CSS中公共样式提取等都是在做这个事情
5、在项目中如果使用框架或者类库，需要允许的情况下，尽量使用轻量级的（尤其是移动端开发）
6、对于图片等资源的交互传输，我们尽量把图片等富媒体资源转换为二进制编码，使用二进制文件流的形式传输，不仅加快了文件传输的速度，也节省了传输的大小

【CSS代码优化】
1、外链式导入CSS样式表，我们使用link代替@import，@import是同步导入，当前资源文件没有加载完成，下面的CSS也不会执行
2、把CSS放在页面的顶部，优先加载和渲染；JS放在底部，等待最后在加载渲染；
3、能够使用CSS解决的，绝对不使用JS或者FLASH
4、避免使用CSS表达式
5、少使用filter滤镜:IE低版本浏览器中，filter会阻止图片的渲染，使用滤镜消耗的性能较大
6、尽量使用transform变形来代替传统css样式的改变，因为transform开启了硬件加速，性能流畅一些
7、修改元素的样式尽量是修改样式类名，少使用style修改
8、css中尽量多使用样式类选择器，少使用通配符或者标签选择器；少使用单规则属性选择器等；（因为CSS选择器是从右向左进行匹配的）
9、避免深层次节点嵌套

【JS代码优化】
1、减少闭包的使用（闭包会产生不销毁的作用域，占用了浏览器很多的内存）
2、一定要养成手动释放堆内存的习惯，经常去清空一些没有用处的内存（例如：手动清除没用的定时器，把一些无用的对象赋值为null...）
3、避免内存嵌套导致的内存泄漏问题（高程三后面有关于内存泄漏的讲解）
4、不要使用with，少使用eval，少使用document.write以及alert等（页面中的提示框，我们可以自己编写一个组件来完成）
5、主要DOM的回流重载问题
6、少使用同步编程，多用异步编程，注意页面中不要出现死循环
7、减少浏览器的异常信息抛出，最好使用try catch给他捕获了
8、少使用全局变量，依托单利、发布订阅、promise等设计模式，来规划我们的代码结构，保证代码的严谨和有利于维护
9、事件绑定尽量使用事件委托来处理
10、减少作用域链的查找（作用域之间不要嵌套太深）
11、优化代码逻辑，用最简单的方式来实现一个功能需求，一些没必要的判断或者没必要执行的代码都让其不执行即可（一些编程的好习惯）
12、位了保证安全，一些重要的数据信息在进行交互的时候要进行加密，而且传输方式尽量使用POST方式，GET请求不安全
13、前后端的数据交互，数据格式最好是JSON格式的：结构清晰明了，处理起来方便，传输性能也比较不错...
......

【有助于SEO优化推广的】
1、设置合理的title、keywords、description等信息
2、标签语义化
3、增加页面中关键词的曝光率，把一些重要的关键词多放在权重较高的标签中（例如：H1中有图片和文字，文字是给蜘蛛看的，图片是给用户看的...）
4、img设置alt属性，属性值是对图片描述的关键词，让爬虫收录图片信息
5、页面中千万不要出现死链接和空链接
6、避免页面301和302的重定向。重定向不太利于网站权重和排名的上升
7、动态页面静态化（伪URL重写）
8、页面中尽量不要使用iframe，不仅不利于SEO优化，而且性能也会受到影响

【其他优化】
1、后台优化：一个网站性能优化前端是次要的，后台优化（尤其是数据分许挖掘的优化）比前端重要很多，后台优化可以把页面加载速度提高很多
2、服务器优化：不管前后端怎么优化，页面整体加载速度只会提升，但是不会特别的明显，尤其是访问人数过多的时候，此时服务器优化很重要：
加服务器
CDN地域分布式



