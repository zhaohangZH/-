什么是全栈开发？
Full Stack developer
前端和后端程序都是我们来开发的，并且所使用的技术语言前后端基本一致；

Java：统一采用技术后台使用Java来编写，前端除了使用js做各种效果，数据交互技术jsp技术来实现

php：前后台都是使用php开发的，对于前端来说，数据交互依然采用的是php，只不过样式和效果还是css和js（php开源框架：think php）rudy、python、asp.net...

JavaScript：目前也可以做全栈开发了，前端部分是html+css+js来完成，后端部分有node.js来完成，而node其实就是js语言，node仅仅是一个平台，能够基于v8引擎运行js代码的一个平台（和谷歌浏览器一样）

全栈开发的意义
前后端完全分离的项目
目前市场上有很多的产品都是前后端完全分离的：后台处理自己的业务逻辑（可以使用任何的技术，客户端不关心你用什么），把客户端需要的数据内容都提供成对应的接口（接口地址），客户端通过js中的AJAX或者接送JSONP调取对应的接口，获取到数据即可，剩下的显示渲染都是前端的任务，和后台没关系
  优势：
1.前后台人员是完全分开独立的，共同根据一个交互协议规范开发（API文档），而且可以同时开发，提高了开发的效率
2.前端开发的内容是独立的一个站点，后台开发的内容也是一个独立的站点，项目代码是分开的，维护管理起来都非常的方便
3.可以使用AJAX等技术实现局部刷新，提高整个网站的人性化操作等
  弊端：
使用AJAX等技术获取到数据，有JS做数据绑定（字符串拼接、ES6的模板字符串、模板引擎插件...），不管使用哪种方式做的数据绑定，在页面的原代码中都看不到绑定的内容，不利于网站的SEO优化
数据渲染是由客户端渲染的，我们先请求数据，然后在渲染数据，这样无形中延长了加载的时间
由于AJAX属于同源请求策略，所以在开发的时候我们需要在本地配置一个和服务器相同的环境域，这样才可以调取到服务器端的数据

非完全前后端分离的项目
前端只需要实现样式结构以及一些JS效果，页面中的数据交互大部分都是后台语言来完成的（php、jsp、ruby...），这样要求前端开发还需要看懂后台的部分代码；
  优势：
数据绑定是由后台处理的，页面的原代码中可以看到绑定的数据内容，有利于SEO优化
数据渲染是由服务器完成的，服务器把需要的数据以及需要展示的内容都渲染完成，然后统一返回给客户端的浏览器呈现，速度很快‘类似于京东淘宝这些网站，他们的首屏幕内容，为了能更快的加载，一般都是服务器端来渲染（后台绑定数据），其他屏幕的再交给JS请求和渲染（这样还可以减轻服务器的负担）’

【网站的SEO优化】
SEO：网络推广运营
假设公司有一个自己的网站或者产品，那么SEO的作用就是利用互联网的传播媒介，把公司的产品推广出去，最直接的来说：别人通过百度搜一个关键词，能不能收到你的产品，而且你产品的位置是不是第一位；

为啥别人在百度中搜索一个关键字能查找到你的网站？
百度搜索引擎养了个宠物叫（爬虫或者叫做蜘蛛），他会让这个宠物定期去你的网站上抓取和收录内容（此时作为网站的SEO专员，你要想尽一切办法让爬虫多收录一些关键字和内容）当当用户通过百度搜索查询某个关键词的时候，百度搜索引擎内部会到他收录的词库中筛选，把所有筛选匹配到的呈现给用户，如果你的网站这个关键词收录的比别人更多，你的网站在搜索结果中就排在前面的位置

作为开发者来说，我们都可以使用什么手段，让百度多收录一些内容呢？
1.设置好网站的TITLE和关键词以及描述
<meta name="keywords" content="..."> 
<meta name="description" content="...">
<title>...</title>

如果页面中有一个LOGO，我们用H1包裹起来，把重要的关键词写在H1中，但是在样式中把文字隐藏（只给用户看图片，文字是给百度蜘蛛看的），这样增加重点词的收录
IMG标签alt属性中写一写关于图片的说明词，因为图片无法收录，但是alt中的文字可以收录
除此之外，我们还可以设置站点机器人、站点地图、和权重高的网站互换友情链接、软文硬文推广等技巧

【SEM】
重写页面的URL（伪URL重写）
SEM：百度竞价
公司在百度注册一个账号，在SEM竞价的后台，我们设置一些关键词，并且设置关键词的点击付费标准，基本上谁掏的钱多，谁排第一位
所有搜索出来的前几条中，后面带着广告两个词的，都不要随意的相信，都是花钱买的


【技术社区或者博客】
全世界一个非常权威专业的技术问答社区
http://stackoverflow.com/
2016年度全世界技术发展的总结报告
https://insights.stackoverflow.com/survey/2016

【GitHub】
全世界一款非常权威的开源社区（代码托管平台），前端开发中你所知道的框架或者类库等，他们的原代码99%在GitHub中都能找到
http://github.com/
有能力后，写一写开源的类库或者插件供别人使用，如果被人用的好，你的gitHub粉丝会越来越多


【客户端和服务器端交互的模型】
客户端：能够向服务器端发送请求的都是客户端（一般指的都是客户的浏览器）
服务器端：能够接收到客户端的请求，并且把一些内容返回给客户端的都是服务器端（一般指的都是公司的服务器）
我们在自己电脑的谷歌浏览器的地址栏中输入：http://www.baidu.com/，这样就能访问到百度的页面了，此时我们电脑的浏览器成为‘客户端’，百度产品所在的服务器就是‘服务器端’；

职业生涯建议：开放分享
任何一个行业想要有更高的简述不仅仅是自身能力很强大，而是影响力很强大，通俗来讲就是有一个强大的圈子，自己在圈子中也占据这个重要的位置；想要做到这一点就要‘开放分享’；
写自己的博客：培养自己的文字功底
在开源社区或者论坛共享自己的精华知识
当讲师
写一些小的作品可以是（类库、组件、插件...）供别人使用...

如何把自己做好的网站（或者博客）发布出来，让别人观看？
1.先购买服务器：存储自己的项目资源文件以及一些数据内容
阿里云服务器
建议购买独立主机（可以自己进入操作系统按照需要的环境以及相关配置）
虚拟主机一般都是管理员把东西配置好了，我们直接使用的，不是很灵活
2.把资源文件上传到服务器上
FTP上传：FileZilla
购买服务器后，会给你账号以及密码用来登录服务器，还会把服务器的外网IP地址也给你
IP地址：当我们链接一个网络后，会自动给我们电脑分配一个标识性的IP地址，多个人链接同一个网络，大家的IP地址类似，但是也有区别，此时我们也可以说大家在同一个局域网内（这个IP地址是局域网IP或者叫做内网IP地址）
同一个局域网中：
大家的IP地址类似
网关、子网掩码、DNS都是相同的

IP地址还有一种情况：公网IP或者叫做外网IP地址，内网IP是在同一个局域网下大家可以互相的访问，但是外网IP是任何人都可以通过这个IP地址访问你的服务器

3.购买域名
域名其实就是给不好记忆的外网IP找了一个好记的名字而已

4.DNS解析（域名解析）
作用：把域名和能访问服务器的外网IP关联在一起
DNS服务器
全世界公用的域名解析服务器，当我们解析一个域名后，会把解析的记录存储在DNS服务器上
域名备案
到工信部把自己的域名和服务器IP进行登记备案，让其合法，以后自己的产品中出现乱七八糟的东西会受到法律的约束
5.以上都准备好后，我们创建服务
相当于招聘了几个售货员，让他们分别负责不同产品的销售，这里创建的服务会负责服务器上不同项目的管理
创建服务的工具：
lls：c#语言编写的产品一般使用llS创建服务，服务器的操作系统一般都是Windows server系统
apache：阿帕奇，PHP语言编写的产品一般都是用这个创建服务，操作系统一般是linux
nignx：这个是目前市场上最受欢迎创建服务的工具，大公司的产品一般用的都是它（可以重载更大的并发量），操作系统是linux
node：使用node.js编写的程序，我们可以基于node发布，操作系统最好也是linux



如何查看自己电脑的IP地址？



面试题：当我们在浏览器地址栏中输入一个网址，到最后能看到这个网址对应的页面，中间都发生了哪些事情？
1.通过客户端输入的域名（网址）去DNS服务器上进行查找
2.在DNS服务器上找到资源服务器的外网IP地址
3.通过外网IP找到对应的服务器
4.通过客户端浏览器地址栏中输入的端口号，找到服务器上对应的服务（项目）
5.在项目中找到和浏览器地址栏中请求的那个文件
6.服务器端把找到的资源文件中的‘原代码’返回给客户端的浏览器
7.客户端浏览器按照自己的引擎（内核）开始解析和渲染这些代码，最后呈现给用户的就是一个页面

【详细知识点】
   控制台：Network
记录了所有客户端和服务器端交互请求的信息，包括资源文件的请求以及数据的请求等等
第一次客户端向服务器端发送请求，服务器端一般都会把首页面HTML文件中的原代码返回给客户端，客户端获取到原代码后，浏览器自上而下依次解析这些代码
解析过程中可能会遇到‘link、script、img、audio、vidio、video...，遇到这些标签，如果需要重新加载文件的，客户端会从新向服务器端发送请求（先到dns找外网ip，然后找到服务器，然后找到端口，在找到资源文件，最后把资源文件中的原代码返回，客户端继续渲染这些原代码）...
一个网页能正常的展示在用户面前，客户端可能需要向服务器端发送很多次的请求，请求很多文件过来才可以：如果想要提高网站的加载速度，请求的次数越少越好，所以网站性能优化最重要的一条就是：‘减少页面中的HTTP请求次数’
