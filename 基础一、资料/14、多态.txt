类具备多种形态：重载、重写
1、重载
后台语言中的重载：方法名相同，参数不同（参数的类型或者个数不一样），这样相当于两个不同的方法，同伙传参不一样，执行对应方法；
public void sum(int num1,int num2){
     //->code
  }
  public void sum(int num1){
      //->code
  }
  sum(10,20); //->执行第一个sum
  sum(10); //->执行第二个sum
JS中不存在类似于后台这样的重载，JS中如果方法名相同，其中一个会把其它相同的函数名都给覆盖掉，最后只保留一个，不管传递几个参数，都只执行这一个；如果一定说有重载，那么JS中的重载就是，通过给一个方法传递不同的实参，在方法中我们判断传递的实参，来处理不同的事情（arguments）；
function sum(num1,num2){
      console.log(1);
  }
  function sum(num1){
      console.log(2);
      if(arguments.length>1){
          num1+=100;
      }else{
          num1-=100;
      }
  }
  sum(10,20); //->2
  sum(10); //->2
2、重写
   继承
   子类继承父类的属性和方法：在继承后，子类还可以把父类的属性和方法进行修改，这就是多态中的重写；
